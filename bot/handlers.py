# bot/handlers.py
import html
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from bot import sheets
from bot.config import settings

router = Router(name=__name__)

GEO_FLAGS = {
    "AR": "üá¶üá∑", "AU": "üá¶üá∫", "BD": "üáßüá©", "BF": "üáßüá´", "BJ": "üáßüáØ",
    "BR": "üáßüá∑", "CA": "üá®üá¶", "CH": "üá®üá≠", "CI": "üá®üáÆ", "CL": "üá®üá±",
    "CM": "üá®üá≤", "CO": "üá®üá¥", "CZ": "üá®üáø", "DE": "üá©üá™", "ES": "üá™üá∏",
    "FR": "üá´üá∑", "HU": "üá≠üá∫", "IN": "üáÆüá≥", "IT": "üáÆüáπ", "KE": "üá∞üá™",
    "KZ": "üá∞üáø", "LT": "üá±üáπ", "LV": "üá±üáª", "MA": "üá≤üá¶", "MM": "üá≤üá≤",
    "MX": "üá≤üáΩ", "NG": "üá≥üá¨", "NL": "üá≥üá±", "NP": "üá≥üáµ", "NZ": "üá≥üáø",
    "PH": "üáµüá≠", "PK": "üáµüá∞", "PL": "üáµüá±", "PT": "üáµüáπ", "SA": "üá∏üá¶",
    "UAE": "üá¶üá™", "QA": "üá∂üá¶", "BH": "üáßüá≠", "KW": "üá∞üáº", "SK": "üá∏üá∞",
    "SN": "üá∏üá≥", "SO": "üá∏üá¥", "TR": "üáπüá∑", "UK": "üá¨üáß", "UZ": "üá∫üáø",
    "ZM": "üáøüá≤",
}

MAX_MSG = 4000  # –ø—Ä–µ–¥–µ–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (—á—É—Ç—å –º–µ–Ω—å—à–µ 4096 –¥–ª—è –∑–∞–ø–∞—Å–∞)

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def _get(o, name, default: str = "-"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ –∏–∑ dict –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞; –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è -> default."""
    try:
        if isinstance(o, dict):
            val = o.get(name, None)
        else:
            val = getattr(o, name, None)
    except Exception:
        val = None
    return default if val in (None, "") else val

def _esc(v) -> str:
    return html.escape(str(v))

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data="all_offers")],
        [InlineKeyboardButton(text="üåç GEO", callback_data="geo_menu")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –Ω–µ–¥–µ–ª–∏", callback_data="top_offers")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="update_cache")]
    ])

def geos_keyboard(geos: list[str]) -> InlineKeyboardMarkup:
    keyboard: list[list[InlineKeyboardButton]] = []
    row: list[InlineKeyboardButton] = []
    for geo in geos:
        flag = GEO_FLAGS.get(geo.upper(), "üè≥Ô∏è")
        row.append(InlineKeyboardButton(text=f"{flag} {geo}", callback_data=f"geo:{geo}"))
        if len(row) == 4:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def pager_kb(kind: str, page: int, total: int, extra: str | None = None) -> InlineKeyboardMarkup:
    """
    kind: 'all' | 'geo'
    extra: –¥–ª—è geo ‚Äî —Å–∞–º GEO (–Ω–∞–ø—Ä–∏–º–µ—Ä 'BR')
    """
    buttons: list[InlineKeyboardButton] = []
    prev_page = page - 1 if page > 1 else total
    next_page = page + 1 if page < total else 1

    if kind == "all":
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"all_offers:{prev_page}"))
        buttons.append(InlineKeyboardButton(text=f"{page}/{total}", callback_data="noop"))
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"all_offers:{next_page}"))
    else:  # geo
        geo = extra or ""
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"geo_pg:{geo}:{prev_page}"))
        buttons.append(InlineKeyboardButton(text=f"{page}/{total}", callback_data="noop"))
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"geo_pg:{geo}:{next_page}"))

    rows = [buttons, [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="home")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –†–µ–Ω–¥–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------
def render_offer_block(o) -> str:
    geo_val = str(_get(o, "geo", ""))  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ–±—ã —Ñ–ª–∞–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ—Ñ–æ–ª—Ç–∏–ª—Å—è
    flag = GEO_FLAGS.get(geo_val.upper(), "üè≥Ô∏è")

    return (
        f"<b>{_esc(_get(o, 'name'))}</b>\n"
        f"üåç <b>GEO:</b> {flag} {_esc(geo_val)}\n"
        f"üì≤ <b>–¢—Ä–∞—Ñ–∏–∫:</b> {_esc(_get(o, 'traffic'))}\n"
        f"üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> {_esc(_get(o, 'payout'))}\n"
        f"üîù <b>–ö–∞–ø–∞/—Å—Ç–∞—Ç—É—Å:</b> {_esc(_get(o, 'capa_status'))}\n"
        f"üìä <b>Cap/Day:</b> {_esc(_get(o, 'cap_day'))}\n"
        f"üíπ <b>EPC/CR:</b> {_esc(_get(o, 'epc'))}\n"
        f"üìâ <b>Crash rate:</b> {_esc(_get(o, 'crash_rate'))}\n"
        f"üí≥ <b>Mindep:</b> {_esc(_get(o, 'mindep'))}\n"
        f"üì¶ <b>Base:</b> {_esc(_get(o, 'base'))}\n"
        f"üíµ <b>–ü—Ä–æ—Ñ–∏—Ç:</b> {_esc(_get(o, 'profit'))}\n"
        f"üéØ <b>KPI:</b> {_esc(_get(o, 'kpi'))}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {_esc(_get(o, 'description'))}\n"
        f"‚ö° <b>–°—Ç–∞—Ç—É—Å:</b> {_esc(_get(o, 'status'))}\n"
        f"üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {_esc(_get(o, 'manager'))}\n"
        f"üïí <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {_esc(_get(o, 'date_added'))}\n\n"
    )

def paginate_offers(offers: list, title: str) -> list[str]:
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –±—ã–ª–∞ <= MAX_MSG —Å–∏–º–≤–æ–ª–æ–≤.
    """
    pages: list[str] = []
    current = f"{title}\n\n"
    for o in offers:
        block = render_offer_block(o)
        if len(current) + len(block) > MAX_MSG:
            pages.append(current.rstrip())
            current = f"{title}\n\n{block}"
        else:
            current += block
    if current.strip():
        pages.append(current.rstrip())
    return pages or [f"{title}\n\n(–ø—É—Å—Ç–æ)"]

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@router.message(F.text == "/start")
async def cmd_start(msg: Message):
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n", reply_markup=main_menu())

@router.callback_query(F.data == "home")
async def back_home(cb: CallbackQuery):
    await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()

@router.callback_query(F.data == "geo_menu")
async def geo_menu(cb: CallbackQuery):
    geos = await sheets.geos()
    if not geos:
        await cb.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.", reply_markup=main_menu())
        await cb.answer()
        return
    await cb.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É (GEO):</b>",
        reply_markup=geos_keyboard(geos),
        parse_mode="HTML"
    )
    await cb.answer()

@router.callback_query(F.data.startswith("geo:"))
async def geo_click(cb: CallbackQuery):
    geo = cb.data.split(":", 1)[1]
    offers = await sheets.offers_by_geo(geo)
    if not offers:
        await cb.message.edit_text(
            f"–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è {GEO_FLAGS.get(geo.upper(),'üè≥Ô∏è')} {html.escape(geo)}.",
            reply_markup=main_menu()
        )
        await cb.answer()
        return

    flag = GEO_FLAGS.get(geo.upper(), "üè≥Ô∏è")
    title = f"<b>–û—Ñ—Ñ–µ—Ä—ã –¥–ª—è {flag} {html.escape(geo)}</b>"
    pages = paginate_offers(offers, title)
    kb = pager_kb("geo", page=1, total=len(pages), extra=geo)
    await cb.message.edit_text(pages[0], parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("geo_pg:"))
async def geo_page(cb: CallbackQuery):
    # callback_data —Ñ–æ—Ä–º–∞—Ç: geo_pg:{geo}:{page}
    try:
        _, geo, page_str = cb.data.split(":", 2)
        page = int(page_str)
    except Exception:
        await cb.answer()
        return

    offers = await sheets.offers_by_geo(geo)
    if not offers:
        await cb.message.edit_text(
            f"–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è {GEO_FLAGS.get(geo.upper(),'üè≥Ô∏è')} {html.escape(geo)}.",
            reply_markup=main_menu()
        )
        await cb.answer()
        return

    flag = GEO_FLAGS.get(geo.upper(), "üè≥Ô∏è")
    title = f"<b>–û—Ñ—Ñ–µ—Ä—ã –¥–ª—è {flag} {html.escape(geo)}</b>"
    pages = paginate_offers(offers, title)
    total = len(pages)
    if page < 1 or page > total:
        page = 1

    kb = pager_kb("geo", page=page, total=total, extra=geo)
    await cb.message.edit_text(pages[page - 1], parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "all_offers")
async def all_offers(cb: CallbackQuery):
    offers = await sheets.get_offers()
    if not offers:
        await cb.message.edit_text("–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu())
        await cb.answer()
        return

    pages = paginate_offers(offers, "<b>–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã</b>")
    kb = pager_kb("all", page=1, total=len(pages))
    await cb.message.edit_text(pages[0], parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("all_offers:"))
async def all_offers_page(cb: CallbackQuery):
    # callback_data —Ñ–æ—Ä–º–∞—Ç: all_offers:{page}
    try:
        _, page_str = cb.data.split(":", 1)
        page = int(page_str)
    except Exception:
        await cb.answer()
        return

    offers = await sheets.get_offers()
    if not offers:
        await cb.message.edit_text("–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=main_menu())
        await cb.answer()
        return

    pages = paginate_offers(offers, "<b>–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã</b>")
    total = len(pages)
    if page < 1 or page > total:
        page = 1

    kb = pager_kb("all", page=page, total=total)
    await cb.message.edit_text(pages[page - 1], parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "top_offers")
async def top_offers(cb: CallbackQuery):
    top = await sheets.top_offers()
    if not top:
        await cb.message.edit_text("–¢–æ–ø –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.", reply_markup=main_menu())
        await cb.answer()
        return

    pages = paginate_offers(top, "<b>üèÜ –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ–¥–µ–ª–∏</b>")
    kb = pager_kb("all", page=1, total=len(pages))  # –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∫–∞–∫ —É all
    await cb.message.edit_text(pages[0], parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "update_cache")
async def update_cache(cb: CallbackQuery):
    if cb.from_user.id not in settings.admin_ids:
        await cb.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu())
        await cb.answer()
        return
    await sheets.get_offers(force=True)
    await cb.message.edit_text("üîÑ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=main_menu())
    await cb.answer()

# --- –¥–æ—Å—Ç—É–ø: /myid, /allow, /deny, /partners ---
@router.message(F.text == "/myid")
async def my_id(msg: Message):
    await msg.answer(f"–í–∞—à ID: <code>{msg.from_user.id}</code>", parse_mode="HTML")

@router.message(F.text.regexp(r"^/allow\s+\d+$"))
async def allow_user(msg: Message):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if msg.from_user.id not in settings.admin_ids:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    uid = int(msg.text.split()[1])
    added = await sheets.add_partner(uid)  # –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –≤ sheets.py
    if added:
        await msg.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω: <code>{uid}</code>", parse_mode="HTML")
    else:
        await msg.answer(f"‚ÑπÔ∏è –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ: <code>{uid}</code>", parse_mode="HTML")

@router.message(F.text.regexp(r"^/deny\s+\d+$"))
async def deny_user(msg: Message):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if msg.from_user.id not in settings.admin_ids:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    uid = int(msg.text.split()[1])
    removed = await sheets.remove_partner(uid)  # –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –≤ sheets.py
    if removed:
        await msg.answer(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: <code>{uid}</code>", parse_mode="HTML")
    else:
        await msg.answer(f"üôÖ –ù–µ –Ω–∞–π–¥–µ–Ω: <code>{uid}</code>", parse_mode="HTML")

@router.message(F.text == "/partners")
async def list_partners(msg: Message):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if msg.from_user.id not in settings.admin_ids:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    ids = sorted(await sheets.partner_ids())  # –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –≤ sheets.py
    if not ids:
        await msg.answer("–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    text = "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã (–¥–æ—Å—Ç—É–ø):\n" + "\n".join(f"‚Ä¢ <code>{i}</code>" for i in ids)
    await msg.answer(text, parse_mode="HTML")
